name: ‚ùå Build project and assign to release (work in progress) 

on: workflow_dispatch
  # release:
  #   types:
  #     - created

jobs:
  buildForAllSupportedPlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneWindows64
    steps:
      - if: github.event.release.tag_name == 'devBuild' && github.event.release.target_commitish == 'dev'
        run: echo "Building from 'dev' branch with 'devBuild' tag"
      - if: github.event.release.tag_name == 'mainBuild' && github.event.release.target_commitish == 'main'
        run: echo "Building from 'main' branch with 'mainBuild' tag"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          lfs: true
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: Library-
      - if: matrix.targetPlatform == 'Android'
        uses: jlumbroso/free-disk-space@v1.3.0
      - uses: game-ci/unity-builder@v3
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: ${{ matrix.targetPlatform }}
      - uses: actions/upload-artifact@v3
        with:
          name: Build-${{ matrix.targetPlatform }}
          path: build/${{ matrix.targetPlatform }}
      - name: Update Release
        id: update_release
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data } = await github.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: context.payload.release.tag_name
            });

            await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: data.id,
              url: data.upload_url,
              name: `Build-${{ matrix.targetPlatform }}`,
              data: require('fs').readFileSync(`build/${{ matrix.targetPlatform }}`),
              headers: {
                'content-type': 'application/zip',
                'content-length': require('fs').statSync(`build/${{ matrix.targetPlatform }}`).size
              }
            });
